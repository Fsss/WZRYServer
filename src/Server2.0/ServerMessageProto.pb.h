// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ServerMessageProto.proto

#ifndef PROTOBUF_ServerMessageProto_2eproto__INCLUDED
#define PROTOBUF_ServerMessageProto_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_ServerMessageProto_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[8];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsLoginMSGImpl();
void InitDefaultsLoginMSG();
void InitDefaultsLoginRSPSImpl();
void InitDefaultsLoginRSPS();
void InitDefaultsRegisterMSGImpl();
void InitDefaultsRegisterMSG();
void InitDefaultsRegisterRSPSImpl();
void InitDefaultsRegisterRSPS();
void InitDefaultsMatchMSGImpl();
void InitDefaultsMatchMSG();
void InitDefaultsMatchRSPSImpl();
void InitDefaultsMatchRSPS();
void InitDefaultsChatMSGImpl();
void InitDefaultsChatMSG();
void InitDefaultsChatRSPSImpl();
void InitDefaultsChatRSPS();
inline void InitDefaults() {
  InitDefaultsLoginMSG();
  InitDefaultsLoginRSPS();
  InitDefaultsRegisterMSG();
  InitDefaultsRegisterRSPS();
  InitDefaultsMatchMSG();
  InitDefaultsMatchRSPS();
  InitDefaultsChatMSG();
  InitDefaultsChatRSPS();
}
}  // namespace protobuf_ServerMessageProto_2eproto
namespace WZRY {
class ChatMSG;
class ChatMSGDefaultTypeInternal;
extern ChatMSGDefaultTypeInternal _ChatMSG_default_instance_;
class ChatRSPS;
class ChatRSPSDefaultTypeInternal;
extern ChatRSPSDefaultTypeInternal _ChatRSPS_default_instance_;
class LoginMSG;
class LoginMSGDefaultTypeInternal;
extern LoginMSGDefaultTypeInternal _LoginMSG_default_instance_;
class LoginRSPS;
class LoginRSPSDefaultTypeInternal;
extern LoginRSPSDefaultTypeInternal _LoginRSPS_default_instance_;
class MatchMSG;
class MatchMSGDefaultTypeInternal;
extern MatchMSGDefaultTypeInternal _MatchMSG_default_instance_;
class MatchRSPS;
class MatchRSPSDefaultTypeInternal;
extern MatchRSPSDefaultTypeInternal _MatchRSPS_default_instance_;
class RegisterMSG;
class RegisterMSGDefaultTypeInternal;
extern RegisterMSGDefaultTypeInternal _RegisterMSG_default_instance_;
class RegisterRSPS;
class RegisterRSPSDefaultTypeInternal;
extern RegisterRSPSDefaultTypeInternal _RegisterRSPS_default_instance_;
}  // namespace WZRY
namespace WZRY {

// ===================================================================

class LoginMSG : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:WZRY.LoginMSG) */ {
 public:
  LoginMSG();
  virtual ~LoginMSG();

  LoginMSG(const LoginMSG& from);

  inline LoginMSG& operator=(const LoginMSG& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LoginMSG(LoginMSG&& from) noexcept
    : LoginMSG() {
    *this = ::std::move(from);
  }

  inline LoginMSG& operator=(LoginMSG&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LoginMSG& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoginMSG* internal_default_instance() {
    return reinterpret_cast<const LoginMSG*>(
               &_LoginMSG_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(LoginMSG* other);
  friend void swap(LoginMSG& a, LoginMSG& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LoginMSG* New() const PROTOBUF_FINAL { return New(NULL); }

  LoginMSG* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LoginMSG& from);
  void MergeFrom(const LoginMSG& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LoginMSG* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string username = 1;
  bool has_username() const;
  void clear_username();
  static const int kUsernameFieldNumber = 1;
  const ::std::string& username() const;
  void set_username(const ::std::string& value);
  #if LANG_CXX11
  void set_username(::std::string&& value);
  #endif
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  ::std::string* mutable_username();
  ::std::string* release_username();
  void set_allocated_username(::std::string* username);

  // required string passwd = 2;
  bool has_passwd() const;
  void clear_passwd();
  static const int kPasswdFieldNumber = 2;
  const ::std::string& passwd() const;
  void set_passwd(const ::std::string& value);
  #if LANG_CXX11
  void set_passwd(::std::string&& value);
  #endif
  void set_passwd(const char* value);
  void set_passwd(const char* value, size_t size);
  ::std::string* mutable_passwd();
  ::std::string* release_passwd();
  void set_allocated_passwd(::std::string* passwd);

  // @@protoc_insertion_point(class_scope:WZRY.LoginMSG)
 private:
  void set_has_username();
  void clear_has_username();
  void set_has_passwd();
  void clear_has_passwd();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  ::google::protobuf::internal::ArenaStringPtr passwd_;
  friend struct ::protobuf_ServerMessageProto_2eproto::TableStruct;
  friend void ::protobuf_ServerMessageProto_2eproto::InitDefaultsLoginMSGImpl();
};
// -------------------------------------------------------------------

class LoginRSPS : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:WZRY.LoginRSPS) */ {
 public:
  LoginRSPS();
  virtual ~LoginRSPS();

  LoginRSPS(const LoginRSPS& from);

  inline LoginRSPS& operator=(const LoginRSPS& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LoginRSPS(LoginRSPS&& from) noexcept
    : LoginRSPS() {
    *this = ::std::move(from);
  }

  inline LoginRSPS& operator=(LoginRSPS&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LoginRSPS& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoginRSPS* internal_default_instance() {
    return reinterpret_cast<const LoginRSPS*>(
               &_LoginRSPS_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(LoginRSPS* other);
  friend void swap(LoginRSPS& a, LoginRSPS& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LoginRSPS* New() const PROTOBUF_FINAL { return New(NULL); }

  LoginRSPS* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LoginRSPS& from);
  void MergeFrom(const LoginRSPS& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LoginRSPS* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string message = 2;
  bool has_message() const;
  void clear_message();
  static const int kMessageFieldNumber = 2;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  #if LANG_CXX11
  void set_message(::std::string&& value);
  #endif
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // required int32 type = 1;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:WZRY.LoginRSPS)
 private:
  void set_has_type();
  void clear_has_type();
  void set_has_message();
  void clear_has_message();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  ::google::protobuf::int32 type_;
  friend struct ::protobuf_ServerMessageProto_2eproto::TableStruct;
  friend void ::protobuf_ServerMessageProto_2eproto::InitDefaultsLoginRSPSImpl();
};
// -------------------------------------------------------------------

class RegisterMSG : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:WZRY.RegisterMSG) */ {
 public:
  RegisterMSG();
  virtual ~RegisterMSG();

  RegisterMSG(const RegisterMSG& from);

  inline RegisterMSG& operator=(const RegisterMSG& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RegisterMSG(RegisterMSG&& from) noexcept
    : RegisterMSG() {
    *this = ::std::move(from);
  }

  inline RegisterMSG& operator=(RegisterMSG&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RegisterMSG& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RegisterMSG* internal_default_instance() {
    return reinterpret_cast<const RegisterMSG*>(
               &_RegisterMSG_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(RegisterMSG* other);
  friend void swap(RegisterMSG& a, RegisterMSG& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RegisterMSG* New() const PROTOBUF_FINAL { return New(NULL); }

  RegisterMSG* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RegisterMSG& from);
  void MergeFrom(const RegisterMSG& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RegisterMSG* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string newname = 1;
  bool has_newname() const;
  void clear_newname();
  static const int kNewnameFieldNumber = 1;
  const ::std::string& newname() const;
  void set_newname(const ::std::string& value);
  #if LANG_CXX11
  void set_newname(::std::string&& value);
  #endif
  void set_newname(const char* value);
  void set_newname(const char* value, size_t size);
  ::std::string* mutable_newname();
  ::std::string* release_newname();
  void set_allocated_newname(::std::string* newname);

  // required string newpasswd = 2;
  bool has_newpasswd() const;
  void clear_newpasswd();
  static const int kNewpasswdFieldNumber = 2;
  const ::std::string& newpasswd() const;
  void set_newpasswd(const ::std::string& value);
  #if LANG_CXX11
  void set_newpasswd(::std::string&& value);
  #endif
  void set_newpasswd(const char* value);
  void set_newpasswd(const char* value, size_t size);
  ::std::string* mutable_newpasswd();
  ::std::string* release_newpasswd();
  void set_allocated_newpasswd(::std::string* newpasswd);

  // @@protoc_insertion_point(class_scope:WZRY.RegisterMSG)
 private:
  void set_has_newname();
  void clear_has_newname();
  void set_has_newpasswd();
  void clear_has_newpasswd();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr newname_;
  ::google::protobuf::internal::ArenaStringPtr newpasswd_;
  friend struct ::protobuf_ServerMessageProto_2eproto::TableStruct;
  friend void ::protobuf_ServerMessageProto_2eproto::InitDefaultsRegisterMSGImpl();
};
// -------------------------------------------------------------------

class RegisterRSPS : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:WZRY.RegisterRSPS) */ {
 public:
  RegisterRSPS();
  virtual ~RegisterRSPS();

  RegisterRSPS(const RegisterRSPS& from);

  inline RegisterRSPS& operator=(const RegisterRSPS& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RegisterRSPS(RegisterRSPS&& from) noexcept
    : RegisterRSPS() {
    *this = ::std::move(from);
  }

  inline RegisterRSPS& operator=(RegisterRSPS&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RegisterRSPS& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RegisterRSPS* internal_default_instance() {
    return reinterpret_cast<const RegisterRSPS*>(
               &_RegisterRSPS_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(RegisterRSPS* other);
  friend void swap(RegisterRSPS& a, RegisterRSPS& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RegisterRSPS* New() const PROTOBUF_FINAL { return New(NULL); }

  RegisterRSPS* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RegisterRSPS& from);
  void MergeFrom(const RegisterRSPS& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RegisterRSPS* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string message = 2;
  bool has_message() const;
  void clear_message();
  static const int kMessageFieldNumber = 2;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  #if LANG_CXX11
  void set_message(::std::string&& value);
  #endif
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // required int32 type = 1;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:WZRY.RegisterRSPS)
 private:
  void set_has_type();
  void clear_has_type();
  void set_has_message();
  void clear_has_message();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  ::google::protobuf::int32 type_;
  friend struct ::protobuf_ServerMessageProto_2eproto::TableStruct;
  friend void ::protobuf_ServerMessageProto_2eproto::InitDefaultsRegisterRSPSImpl();
};
// -------------------------------------------------------------------

class MatchMSG : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:WZRY.MatchMSG) */ {
 public:
  MatchMSG();
  virtual ~MatchMSG();

  MatchMSG(const MatchMSG& from);

  inline MatchMSG& operator=(const MatchMSG& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MatchMSG(MatchMSG&& from) noexcept
    : MatchMSG() {
    *this = ::std::move(from);
  }

  inline MatchMSG& operator=(MatchMSG&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MatchMSG& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MatchMSG* internal_default_instance() {
    return reinterpret_cast<const MatchMSG*>(
               &_MatchMSG_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(MatchMSG* other);
  friend void swap(MatchMSG& a, MatchMSG& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MatchMSG* New() const PROTOBUF_FINAL { return New(NULL); }

  MatchMSG* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MatchMSG& from);
  void MergeFrom(const MatchMSG& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MatchMSG* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool isMatch = 1;
  bool has_ismatch() const;
  void clear_ismatch();
  static const int kIsMatchFieldNumber = 1;
  bool ismatch() const;
  void set_ismatch(bool value);

  // required int32 type = 2;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:WZRY.MatchMSG)
 private:
  void set_has_ismatch();
  void clear_has_ismatch();
  void set_has_type();
  void clear_has_type();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  bool ismatch_;
  ::google::protobuf::int32 type_;
  friend struct ::protobuf_ServerMessageProto_2eproto::TableStruct;
  friend void ::protobuf_ServerMessageProto_2eproto::InitDefaultsMatchMSGImpl();
};
// -------------------------------------------------------------------

class MatchRSPS : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:WZRY.MatchRSPS) */ {
 public:
  MatchRSPS();
  virtual ~MatchRSPS();

  MatchRSPS(const MatchRSPS& from);

  inline MatchRSPS& operator=(const MatchRSPS& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MatchRSPS(MatchRSPS&& from) noexcept
    : MatchRSPS() {
    *this = ::std::move(from);
  }

  inline MatchRSPS& operator=(MatchRSPS&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MatchRSPS& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MatchRSPS* internal_default_instance() {
    return reinterpret_cast<const MatchRSPS*>(
               &_MatchRSPS_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(MatchRSPS* other);
  friend void swap(MatchRSPS& a, MatchRSPS& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MatchRSPS* New() const PROTOBUF_FINAL { return New(NULL); }

  MatchRSPS* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MatchRSPS& from);
  void MergeFrom(const MatchRSPS& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MatchRSPS* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool success = 1;
  bool has_success() const;
  void clear_success();
  static const int kSuccessFieldNumber = 1;
  bool success() const;
  void set_success(bool value);

  // required int32 type = 2;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:WZRY.MatchRSPS)
 private:
  void set_has_success();
  void clear_has_success();
  void set_has_type();
  void clear_has_type();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  bool success_;
  ::google::protobuf::int32 type_;
  friend struct ::protobuf_ServerMessageProto_2eproto::TableStruct;
  friend void ::protobuf_ServerMessageProto_2eproto::InitDefaultsMatchRSPSImpl();
};
// -------------------------------------------------------------------

class ChatMSG : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:WZRY.ChatMSG) */ {
 public:
  ChatMSG();
  virtual ~ChatMSG();

  ChatMSG(const ChatMSG& from);

  inline ChatMSG& operator=(const ChatMSG& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ChatMSG(ChatMSG&& from) noexcept
    : ChatMSG() {
    *this = ::std::move(from);
  }

  inline ChatMSG& operator=(ChatMSG&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChatMSG& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChatMSG* internal_default_instance() {
    return reinterpret_cast<const ChatMSG*>(
               &_ChatMSG_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(ChatMSG* other);
  friend void swap(ChatMSG& a, ChatMSG& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ChatMSG* New() const PROTOBUF_FINAL { return New(NULL); }

  ChatMSG* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ChatMSG& from);
  void MergeFrom(const ChatMSG& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ChatMSG* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string message = 2;
  bool has_message() const;
  void clear_message();
  static const int kMessageFieldNumber = 2;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  #if LANG_CXX11
  void set_message(::std::string&& value);
  #endif
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // required int32 type = 1;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:WZRY.ChatMSG)
 private:
  void set_has_type();
  void clear_has_type();
  void set_has_message();
  void clear_has_message();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  ::google::protobuf::int32 type_;
  friend struct ::protobuf_ServerMessageProto_2eproto::TableStruct;
  friend void ::protobuf_ServerMessageProto_2eproto::InitDefaultsChatMSGImpl();
};
// -------------------------------------------------------------------

class ChatRSPS : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:WZRY.ChatRSPS) */ {
 public:
  ChatRSPS();
  virtual ~ChatRSPS();

  ChatRSPS(const ChatRSPS& from);

  inline ChatRSPS& operator=(const ChatRSPS& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ChatRSPS(ChatRSPS&& from) noexcept
    : ChatRSPS() {
    *this = ::std::move(from);
  }

  inline ChatRSPS& operator=(ChatRSPS&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChatRSPS& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChatRSPS* internal_default_instance() {
    return reinterpret_cast<const ChatRSPS*>(
               &_ChatRSPS_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(ChatRSPS* other);
  friend void swap(ChatRSPS& a, ChatRSPS& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ChatRSPS* New() const PROTOBUF_FINAL { return New(NULL); }

  ChatRSPS* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ChatRSPS& from);
  void MergeFrom(const ChatRSPS& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ChatRSPS* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string message = 2;
  bool has_message() const;
  void clear_message();
  static const int kMessageFieldNumber = 2;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  #if LANG_CXX11
  void set_message(::std::string&& value);
  #endif
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // required bool success = 1;
  bool has_success() const;
  void clear_success();
  static const int kSuccessFieldNumber = 1;
  bool success() const;
  void set_success(bool value);

  // @@protoc_insertion_point(class_scope:WZRY.ChatRSPS)
 private:
  void set_has_success();
  void clear_has_success();
  void set_has_message();
  void clear_has_message();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  bool success_;
  friend struct ::protobuf_ServerMessageProto_2eproto::TableStruct;
  friend void ::protobuf_ServerMessageProto_2eproto::InitDefaultsChatRSPSImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LoginMSG

// required string username = 1;
inline bool LoginMSG::has_username() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LoginMSG::set_has_username() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LoginMSG::clear_has_username() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LoginMSG::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_username();
}
inline const ::std::string& LoginMSG::username() const {
  // @@protoc_insertion_point(field_get:WZRY.LoginMSG.username)
  return username_.GetNoArena();
}
inline void LoginMSG::set_username(const ::std::string& value) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:WZRY.LoginMSG.username)
}
#if LANG_CXX11
inline void LoginMSG::set_username(::std::string&& value) {
  set_has_username();
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:WZRY.LoginMSG.username)
}
#endif
inline void LoginMSG::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:WZRY.LoginMSG.username)
}
inline void LoginMSG::set_username(const char* value, size_t size) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:WZRY.LoginMSG.username)
}
inline ::std::string* LoginMSG::mutable_username() {
  set_has_username();
  // @@protoc_insertion_point(field_mutable:WZRY.LoginMSG.username)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LoginMSG::release_username() {
  // @@protoc_insertion_point(field_release:WZRY.LoginMSG.username)
  clear_has_username();
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LoginMSG::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    set_has_username();
  } else {
    clear_has_username();
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:WZRY.LoginMSG.username)
}

// required string passwd = 2;
inline bool LoginMSG::has_passwd() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LoginMSG::set_has_passwd() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LoginMSG::clear_has_passwd() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LoginMSG::clear_passwd() {
  passwd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_passwd();
}
inline const ::std::string& LoginMSG::passwd() const {
  // @@protoc_insertion_point(field_get:WZRY.LoginMSG.passwd)
  return passwd_.GetNoArena();
}
inline void LoginMSG::set_passwd(const ::std::string& value) {
  set_has_passwd();
  passwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:WZRY.LoginMSG.passwd)
}
#if LANG_CXX11
inline void LoginMSG::set_passwd(::std::string&& value) {
  set_has_passwd();
  passwd_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:WZRY.LoginMSG.passwd)
}
#endif
inline void LoginMSG::set_passwd(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_passwd();
  passwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:WZRY.LoginMSG.passwd)
}
inline void LoginMSG::set_passwd(const char* value, size_t size) {
  set_has_passwd();
  passwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:WZRY.LoginMSG.passwd)
}
inline ::std::string* LoginMSG::mutable_passwd() {
  set_has_passwd();
  // @@protoc_insertion_point(field_mutable:WZRY.LoginMSG.passwd)
  return passwd_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LoginMSG::release_passwd() {
  // @@protoc_insertion_point(field_release:WZRY.LoginMSG.passwd)
  clear_has_passwd();
  return passwd_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LoginMSG::set_allocated_passwd(::std::string* passwd) {
  if (passwd != NULL) {
    set_has_passwd();
  } else {
    clear_has_passwd();
  }
  passwd_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), passwd);
  // @@protoc_insertion_point(field_set_allocated:WZRY.LoginMSG.passwd)
}

// -------------------------------------------------------------------

// LoginRSPS

// required int32 type = 1;
inline bool LoginRSPS::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LoginRSPS::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LoginRSPS::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LoginRSPS::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 LoginRSPS::type() const {
  // @@protoc_insertion_point(field_get:WZRY.LoginRSPS.type)
  return type_;
}
inline void LoginRSPS::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:WZRY.LoginRSPS.type)
}

// required string message = 2;
inline bool LoginRSPS::has_message() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LoginRSPS::set_has_message() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LoginRSPS::clear_has_message() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LoginRSPS::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_message();
}
inline const ::std::string& LoginRSPS::message() const {
  // @@protoc_insertion_point(field_get:WZRY.LoginRSPS.message)
  return message_.GetNoArena();
}
inline void LoginRSPS::set_message(const ::std::string& value) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:WZRY.LoginRSPS.message)
}
#if LANG_CXX11
inline void LoginRSPS::set_message(::std::string&& value) {
  set_has_message();
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:WZRY.LoginRSPS.message)
}
#endif
inline void LoginRSPS::set_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:WZRY.LoginRSPS.message)
}
inline void LoginRSPS::set_message(const char* value, size_t size) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:WZRY.LoginRSPS.message)
}
inline ::std::string* LoginRSPS::mutable_message() {
  set_has_message();
  // @@protoc_insertion_point(field_mutable:WZRY.LoginRSPS.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LoginRSPS::release_message() {
  // @@protoc_insertion_point(field_release:WZRY.LoginRSPS.message)
  clear_has_message();
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LoginRSPS::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    set_has_message();
  } else {
    clear_has_message();
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:WZRY.LoginRSPS.message)
}

// -------------------------------------------------------------------

// RegisterMSG

// required string newname = 1;
inline bool RegisterMSG::has_newname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RegisterMSG::set_has_newname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RegisterMSG::clear_has_newname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RegisterMSG::clear_newname() {
  newname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_newname();
}
inline const ::std::string& RegisterMSG::newname() const {
  // @@protoc_insertion_point(field_get:WZRY.RegisterMSG.newname)
  return newname_.GetNoArena();
}
inline void RegisterMSG::set_newname(const ::std::string& value) {
  set_has_newname();
  newname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:WZRY.RegisterMSG.newname)
}
#if LANG_CXX11
inline void RegisterMSG::set_newname(::std::string&& value) {
  set_has_newname();
  newname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:WZRY.RegisterMSG.newname)
}
#endif
inline void RegisterMSG::set_newname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_newname();
  newname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:WZRY.RegisterMSG.newname)
}
inline void RegisterMSG::set_newname(const char* value, size_t size) {
  set_has_newname();
  newname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:WZRY.RegisterMSG.newname)
}
inline ::std::string* RegisterMSG::mutable_newname() {
  set_has_newname();
  // @@protoc_insertion_point(field_mutable:WZRY.RegisterMSG.newname)
  return newname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RegisterMSG::release_newname() {
  // @@protoc_insertion_point(field_release:WZRY.RegisterMSG.newname)
  clear_has_newname();
  return newname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RegisterMSG::set_allocated_newname(::std::string* newname) {
  if (newname != NULL) {
    set_has_newname();
  } else {
    clear_has_newname();
  }
  newname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), newname);
  // @@protoc_insertion_point(field_set_allocated:WZRY.RegisterMSG.newname)
}

// required string newpasswd = 2;
inline bool RegisterMSG::has_newpasswd() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RegisterMSG::set_has_newpasswd() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RegisterMSG::clear_has_newpasswd() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RegisterMSG::clear_newpasswd() {
  newpasswd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_newpasswd();
}
inline const ::std::string& RegisterMSG::newpasswd() const {
  // @@protoc_insertion_point(field_get:WZRY.RegisterMSG.newpasswd)
  return newpasswd_.GetNoArena();
}
inline void RegisterMSG::set_newpasswd(const ::std::string& value) {
  set_has_newpasswd();
  newpasswd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:WZRY.RegisterMSG.newpasswd)
}
#if LANG_CXX11
inline void RegisterMSG::set_newpasswd(::std::string&& value) {
  set_has_newpasswd();
  newpasswd_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:WZRY.RegisterMSG.newpasswd)
}
#endif
inline void RegisterMSG::set_newpasswd(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_newpasswd();
  newpasswd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:WZRY.RegisterMSG.newpasswd)
}
inline void RegisterMSG::set_newpasswd(const char* value, size_t size) {
  set_has_newpasswd();
  newpasswd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:WZRY.RegisterMSG.newpasswd)
}
inline ::std::string* RegisterMSG::mutable_newpasswd() {
  set_has_newpasswd();
  // @@protoc_insertion_point(field_mutable:WZRY.RegisterMSG.newpasswd)
  return newpasswd_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RegisterMSG::release_newpasswd() {
  // @@protoc_insertion_point(field_release:WZRY.RegisterMSG.newpasswd)
  clear_has_newpasswd();
  return newpasswd_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RegisterMSG::set_allocated_newpasswd(::std::string* newpasswd) {
  if (newpasswd != NULL) {
    set_has_newpasswd();
  } else {
    clear_has_newpasswd();
  }
  newpasswd_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), newpasswd);
  // @@protoc_insertion_point(field_set_allocated:WZRY.RegisterMSG.newpasswd)
}

// -------------------------------------------------------------------

// RegisterRSPS

// required int32 type = 1;
inline bool RegisterRSPS::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RegisterRSPS::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RegisterRSPS::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RegisterRSPS::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 RegisterRSPS::type() const {
  // @@protoc_insertion_point(field_get:WZRY.RegisterRSPS.type)
  return type_;
}
inline void RegisterRSPS::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:WZRY.RegisterRSPS.type)
}

// required string message = 2;
inline bool RegisterRSPS::has_message() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RegisterRSPS::set_has_message() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RegisterRSPS::clear_has_message() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RegisterRSPS::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_message();
}
inline const ::std::string& RegisterRSPS::message() const {
  // @@protoc_insertion_point(field_get:WZRY.RegisterRSPS.message)
  return message_.GetNoArena();
}
inline void RegisterRSPS::set_message(const ::std::string& value) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:WZRY.RegisterRSPS.message)
}
#if LANG_CXX11
inline void RegisterRSPS::set_message(::std::string&& value) {
  set_has_message();
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:WZRY.RegisterRSPS.message)
}
#endif
inline void RegisterRSPS::set_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:WZRY.RegisterRSPS.message)
}
inline void RegisterRSPS::set_message(const char* value, size_t size) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:WZRY.RegisterRSPS.message)
}
inline ::std::string* RegisterRSPS::mutable_message() {
  set_has_message();
  // @@protoc_insertion_point(field_mutable:WZRY.RegisterRSPS.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RegisterRSPS::release_message() {
  // @@protoc_insertion_point(field_release:WZRY.RegisterRSPS.message)
  clear_has_message();
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RegisterRSPS::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    set_has_message();
  } else {
    clear_has_message();
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:WZRY.RegisterRSPS.message)
}

// -------------------------------------------------------------------

// MatchMSG

// required bool isMatch = 1;
inline bool MatchMSG::has_ismatch() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MatchMSG::set_has_ismatch() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MatchMSG::clear_has_ismatch() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MatchMSG::clear_ismatch() {
  ismatch_ = false;
  clear_has_ismatch();
}
inline bool MatchMSG::ismatch() const {
  // @@protoc_insertion_point(field_get:WZRY.MatchMSG.isMatch)
  return ismatch_;
}
inline void MatchMSG::set_ismatch(bool value) {
  set_has_ismatch();
  ismatch_ = value;
  // @@protoc_insertion_point(field_set:WZRY.MatchMSG.isMatch)
}

// required int32 type = 2;
inline bool MatchMSG::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MatchMSG::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MatchMSG::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MatchMSG::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 MatchMSG::type() const {
  // @@protoc_insertion_point(field_get:WZRY.MatchMSG.type)
  return type_;
}
inline void MatchMSG::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:WZRY.MatchMSG.type)
}

// -------------------------------------------------------------------

// MatchRSPS

// required bool success = 1;
inline bool MatchRSPS::has_success() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MatchRSPS::set_has_success() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MatchRSPS::clear_has_success() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MatchRSPS::clear_success() {
  success_ = false;
  clear_has_success();
}
inline bool MatchRSPS::success() const {
  // @@protoc_insertion_point(field_get:WZRY.MatchRSPS.success)
  return success_;
}
inline void MatchRSPS::set_success(bool value) {
  set_has_success();
  success_ = value;
  // @@protoc_insertion_point(field_set:WZRY.MatchRSPS.success)
}

// required int32 type = 2;
inline bool MatchRSPS::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MatchRSPS::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MatchRSPS::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MatchRSPS::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 MatchRSPS::type() const {
  // @@protoc_insertion_point(field_get:WZRY.MatchRSPS.type)
  return type_;
}
inline void MatchRSPS::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:WZRY.MatchRSPS.type)
}

// -------------------------------------------------------------------

// ChatMSG

// required int32 type = 1;
inline bool ChatMSG::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ChatMSG::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ChatMSG::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ChatMSG::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 ChatMSG::type() const {
  // @@protoc_insertion_point(field_get:WZRY.ChatMSG.type)
  return type_;
}
inline void ChatMSG::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:WZRY.ChatMSG.type)
}

// required string message = 2;
inline bool ChatMSG::has_message() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChatMSG::set_has_message() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChatMSG::clear_has_message() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChatMSG::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_message();
}
inline const ::std::string& ChatMSG::message() const {
  // @@protoc_insertion_point(field_get:WZRY.ChatMSG.message)
  return message_.GetNoArena();
}
inline void ChatMSG::set_message(const ::std::string& value) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:WZRY.ChatMSG.message)
}
#if LANG_CXX11
inline void ChatMSG::set_message(::std::string&& value) {
  set_has_message();
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:WZRY.ChatMSG.message)
}
#endif
inline void ChatMSG::set_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:WZRY.ChatMSG.message)
}
inline void ChatMSG::set_message(const char* value, size_t size) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:WZRY.ChatMSG.message)
}
inline ::std::string* ChatMSG::mutable_message() {
  set_has_message();
  // @@protoc_insertion_point(field_mutable:WZRY.ChatMSG.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChatMSG::release_message() {
  // @@protoc_insertion_point(field_release:WZRY.ChatMSG.message)
  clear_has_message();
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChatMSG::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    set_has_message();
  } else {
    clear_has_message();
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:WZRY.ChatMSG.message)
}

// -------------------------------------------------------------------

// ChatRSPS

// required bool success = 1;
inline bool ChatRSPS::has_success() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ChatRSPS::set_has_success() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ChatRSPS::clear_has_success() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ChatRSPS::clear_success() {
  success_ = false;
  clear_has_success();
}
inline bool ChatRSPS::success() const {
  // @@protoc_insertion_point(field_get:WZRY.ChatRSPS.success)
  return success_;
}
inline void ChatRSPS::set_success(bool value) {
  set_has_success();
  success_ = value;
  // @@protoc_insertion_point(field_set:WZRY.ChatRSPS.success)
}

// required string message = 2;
inline bool ChatRSPS::has_message() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChatRSPS::set_has_message() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChatRSPS::clear_has_message() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChatRSPS::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_message();
}
inline const ::std::string& ChatRSPS::message() const {
  // @@protoc_insertion_point(field_get:WZRY.ChatRSPS.message)
  return message_.GetNoArena();
}
inline void ChatRSPS::set_message(const ::std::string& value) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:WZRY.ChatRSPS.message)
}
#if LANG_CXX11
inline void ChatRSPS::set_message(::std::string&& value) {
  set_has_message();
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:WZRY.ChatRSPS.message)
}
#endif
inline void ChatRSPS::set_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:WZRY.ChatRSPS.message)
}
inline void ChatRSPS::set_message(const char* value, size_t size) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:WZRY.ChatRSPS.message)
}
inline ::std::string* ChatRSPS::mutable_message() {
  set_has_message();
  // @@protoc_insertion_point(field_mutable:WZRY.ChatRSPS.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChatRSPS::release_message() {
  // @@protoc_insertion_point(field_release:WZRY.ChatRSPS.message)
  clear_has_message();
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChatRSPS::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    set_has_message();
  } else {
    clear_has_message();
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:WZRY.ChatRSPS.message)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace WZRY

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ServerMessageProto_2eproto__INCLUDED
